import static java.lang.Math.max;

public class CoinChange {

   public void solve1(int total, int[] coins) {
        int[][] dpTable = new int[coins.length + 1][total + 1];

        for (int i = 0; i <= coins.length; i++)
            dpTable[i][0] = 1;

        for (int i = 1; i <= total; i++)
            dpTable[0][i] = 0;

        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= total; j++) {
                if(coins[i-1]<=j){
                    dpTable[i][j]=dpTable[i][j-coins[i-1]]+dpTable[i-1][j];
                }else {
                    dpTable[i][j]=dpTable[i-1][j];
                }
            }
        }
        System.out.println("Solution: " + dpTable[coins.length][total]);
        printdpTable(dpTable);
    }

    private void printdpTable(int[][] dpTable) {
        for (int i = 0; i < dpTable.length; i++) {
            for (int j = 0; j < dpTable[0].length; j++) {
                System.out.print(dpTable[i][j] + " - ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        CoinChange coinChange = new CoinChange();
// minimum no of ways to get the total with in coin array 
//        int[] coins = {2, 3, 5, 6, 8, 10};
//        int total = 10;
        int[] coins = {1,2,3};
        int total = 5;

    //    System.out.println(coinChange.naiveCoinChange(total, coins, 0));
        coinChange.solve1(total, coins);

    }
}
