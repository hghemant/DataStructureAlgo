public class ShortestCommonSupersequence {
    private String s1;
    private String s2;
    int[][] dpTable;

    public ShortestCommonSupersequence(String s1, String s2) {
        this.s1 = s1;
        this.s2 = s2;
        this.dpTable = new int[s1.length() + 1][s2.length() + 1];
    }
    public void solve1() {
        for (int i = 0; i < s1.length(); i++) {
            for (int j = 0; j < s2.length(); j++) {
                if (i == 0 || j == 0) {
                    dpTable[i][j] = 0;
                }
            }
        }
        for (int i = 1; i <= s1.length(); i++) {
            for (int j = 1; j <= s2.length(); j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dpTable[i][j] = 1 + dpTable[i - 1][j - 1];
                } else {
                    dpTable[i][j] = Math.max(dpTable[i - 1][j], dpTable[i][j - 1]);
                }
            }
        }
        System.out.println("Longest common sub is - " + dpTable[s1.length()][s2.length()]);
    }

    public void solve() {
        solve1();
        int lcsLength = dpTable[s1.length()][s2.length()];
        int scsLength = (s1.length() + s2.length()) - lcsLength;
        System.out.println("Shortes common supersequence length - " + scsLength);
        printSCS();
    }

    public void printSCS() {
        String str = "";
        int row = s1.length(), col = s2.length();
        while (row > 0 && col > 0) {
            if (s1.charAt(row - 1) == s2.charAt(col - 1)) {
                str = str + s1.charAt(row - 1);
                row--;
                col--;
            } else if (dpTable[row - 1][col] > dpTable[row][col - 1]) {
                str = str + s2.charAt(col - 1);
                col--;
            } else {
                str = str + s1.charAt(row - 1);
                row--;
            }
        }
        str = reverse(str);
        System.out.println(str);
    }

    static String reverse(String input) {
        char[] temparray = input.toCharArray();
        int left, right = 0;
        right = temparray.length - 1;

        for (left = 0; left < right; left++, right--) {
            // Swap values of left and right
            char temp = temparray[left];
            temparray[left] = temparray[right];
            temparray[right] = temp;
        }
        return String.valueOf(temparray);
    }

    public static void main(String[] args) {
        String s1 = "geek";
        String s2 = "eke";
//        String s1 = "AGGTAB";
//        String s2 = "GXTXAYB";
        ShortestCommonSupersequence scs = new ShortestCommonSupersequence(s1, s2);
        scs.solve();
    }
}
