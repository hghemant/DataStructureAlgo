public class EggDropProb {
    /* Function to get minimum number of  trials needed in worst case with n eggs and k floors */
    private int n;
    private int k;
   // int[][] dpTable=new int[n + 1][k + 1];

    public EggDropProb() {

    }

/*    public EggDropProb(int n, int k) {
        this.n = n;
        this.k = k;
        this.dpTable = new int[n + 1][k + 1];
    }*/
    static int eggDrop(int n, int k)
    {
        int[][] dpTable=new int[n + 1][k + 1];

        for (int i =0; i<n;i++){
            for (int j =0; j<k; j++){
                    dpTable[i][j]=-1;
            }
        }

        // If there are no floors, then no trials needed. OR if there is one floor, one trial needed.
        if (k == 1 || k == 0)
            return k;
        // We need k trials for one egg and k floors
         if (n == 1)
            return k;

  /*       if(dpTable[n][k]!=-1){
             return dpTable[n][k];
         }*/

        int min = Integer.MAX_VALUE;

        // Consider all droppings from  1st floor to kth floor and return the minimum of these values plus 1.
        for (int x = 1; x <= k; x++) {
           int temp = 1+Math.max(eggDrop(n - 1, x - 1), eggDrop(n, k - x));
            min=Math.min(min,temp);
        }
        return dpTable[n][k]=min;
    }

    // Driver code
    public static void main(String args[])
    {
        int n = 2, k = 10;
        System.out.print("Minimum number of "  + "trials in worst case with " + n + " eggs and " + k + " floors is " + eggDrop(n, k));
    }

}
