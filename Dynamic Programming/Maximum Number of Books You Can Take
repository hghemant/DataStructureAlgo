Qus : 
You are given a 0-indexed integer array books of length n where books[i] denotes the number of books on the ith shelf of a bookshelf.
You are going to take books from a contiguous section of the bookshelf spanning from l to r where 0 <= l <= r < n. For each index i in the range l <= i < r, you must take strictly fewer books from shelf i than shelf i + 1.
Return the maximum number of books you can take from the bookshelf.

Example : 

Input: books = [8,5,2,7,9]
Output: 19
Explanation:
- Take 1 book from shelf 1.
- Take 2 books from shelf 2.
- Take 7 books from shelf 3.
- Take 9 books from shelf 4.
You have taken 19 books, so return 19.
It can be proven that 19 is the maximum number of books you can take.

Ans 

We need a stack to keep the indexes of the shelves. We process all the shelves one by one.
Each time we try to make 1,2,3,…,books[i] sequence is the index difference allow us 
(since this sequence should be strictly increasing). Each time after considering books[i],
we put its index in the stack and we make sure we keep track of the max take as we go.
Method totalTake takes books[i] and index difference between
I and an index before I or between I and 0. This method returns the sum of the sequence that we can make starting from books[I] backward (1,2,3,…,books[i]).

   public long maximumBooks(int[] books) {
        Deque<Integer> indexStack = new ArrayDeque<>();
        long currTake = 0, maxTake = 0;
        for (int i = 0; i < books.length; i++) {
         
         // Go back till you find a index that you can make 1,2,3,...,books[i]
         
            while (!indexStack.isEmpty() && books[i] - books[indexStack.peek()] < i - indexStack.peek()) {
                int peekIndex = indexStack.pop();
                 // When you remove the index make sure you remove the take from current take as well
                currTake -= totalTake(books[peekIndex], indexStack.isEmpty() ? peekIndex + 1 : peekIndex - indexStack.peek());
            }
            // If stack is empty, we have i+1 index to reach books[i] from 0 to ith index
            currTake += totalTake(books[i], indexStack.isEmpty() ? i + 1 : i - indexStack.peek()); 
            indexStack.push(i); // Push the current index into the stack
            maxTake = Math.max(currTake, maxTake); // Keep track of the max take
        }
        return maxTake;
    }
// 1,2,3,...,n=(n*(n+1))/2 also, we should remove the prefix if our index diff doesn't allow us to make it
    private long totalTake(long n, int indexDiff) { 
        return (n * (n + 1)) / 2 - (n > indexDiff ? (n - indexDiff) * (n - indexDiff + 1) : 0) / 2;
    }
