/*
 * Given a string s, partition s such that every substring of the partition is a palindrome.
 * 
 Return the minimum cuts needed for a palindrome partitioning of s.
 
 Example : 
 Given 
 s = "aab",
 Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
 
 http://www.geeksforgeeks.org/dynamic-programming-set-17-palindrome-partitioning/
 */
public class Palindrom {
    static int[][] dpTable;

    public static int palindrom(String s, int i, int j) {
        if (i > j) return 0;
        if (isPalindrom(s, i, j) == true) {
            return 0;
        }
        if (dpTable[i][j] != -1){
            return dpTable[i][j];
        }
        int mn = Integer.MAX_VALUE;
        int left = Integer.MAX_VALUE;
        int right = Integer.MAX_VALUE;
        for (int k = i; k < j ; k++) {

           /* if(dpTable[i][k]!=-1) {
                 left= dpTable[i][k];
            }else {
                palindrom(s, i, k);
                dpTable[i][k]=left;
            }
            if(dpTable[k+1][j]!=-1) {
                right= dpTable[k+1][j];
            }else {
                palindrom(s, k+1, j);
                dpTable[k+1][j]=right;
            }*/

            int temp = 1 + palindrom( s,  i,  k)+  palindrom( s,  k+1,  j);
          //  int temp = 1 + left+ right;
            if (temp < mn) {
                mn = temp;
            }
        }
        //System.out.print(mn);
        return dpTable[i][j]=mn;
    }

    public static boolean isPalindrom(String str, int i, int j) {
        if (i == j) return true;
        if (i > j) return true;
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }

    public static void main(String[] args) {
        String s = "ababbbabbababa";
        dpTable = new int[s.length() + 1][s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < s.length(); j++) {
                dpTable[i][j] = -1;
            }
        }
        int i = 0;
        int j = s.length();
        System.out.println(palindrom(s, i, j-1));
    }
}
