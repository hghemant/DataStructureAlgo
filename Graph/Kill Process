You have n processes forming a rooted tree structure. You are given two integer arrays pid and ppid, where pid[i] is the ID of the ith process and ppid[i] is the ID of the ith process's parent process.

Each process has only one parent process but may have multiple children processes. Only one process has ppid[i] = 0, which means this process has no parent process (the root of the tree).

When a process is killed, all of its children processes will also be killed.

Given an integer kill representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.

 
 Input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5
Output: [5,10]
Explanation: The processes colored in red are the processes that should be killed.
 



public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {
        Map<Integer, List<Integer>> graph = buildGraph(pid, ppid);
        
        List<Integer> res = new ArrayList<>();
        traverse(graph, kill, res);
        return res;
    }
    
    public Map<Integer, List<Integer>> buildGraph(List<Integer> pid, List<Integer> ppid) {
        int n = pid.size();
        Map<Integer, List<Integer>> graph= new HashMap<>();
        for (int i = 0; i < n; i++) {
            int p = pid.get(i);
            int pp = ppid.get(i);
            if (!graph.containsKey(pp)) {
                List<Integer> list = new ArrayList<>();
                graph.put(pp, list);
            }
            List<Integer> children = graph.get(pp);
            children.add(p);
        }
        return graph;
    }
    
    public void traverse(Map<Integer, List<Integer>> graph, int id, List<Integer> res) {
        res.add(id);
        
        List<Integer> children = graph.get(id);
        if (children != null) {
            for (int child : children) {
                traverse(graph, child, res);
            }
        }
    }
