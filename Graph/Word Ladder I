Question :---> A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Example : 

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.


Answer --->
public int wordLadderLength(String startWord, String targetWord, String[] wordList)
    {
        Set<String> set = new HashSet<>();
        for (String s : wordList) {
            set.add(s);
        }
        if (!set.contains(targetWord)) {
            return 0;
        }
        int step=0;
        Queue<String> q = new LinkedList<>();
        q.add(startWord);

        while (!q.isEmpty()) {
            step++;
            int len = q.size();
            for (int i = 0; i < len; i++) {
                char[] word = q.remove().toCharArray();
                for (int j = 0; j < startWord.length(); j++) {
                    char ch = word[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        word[j] = c;
                        if (String.valueOf(word).equals(targetWord))
                            return step + 1;

                        if (!set.contains(String.valueOf(word)))
                            continue;
                        set.remove(String.valueOf(word));

                        q.add(String.valueOf(word));
                    }
                    word[j] = ch;

                }
            }
        }
        return 0;
    }
