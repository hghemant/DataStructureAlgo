

import java.util.ArrayList;
import java.util.LinkedList;

public class UndirectedGraph {
    private int V;   // No. of vertices
    private LinkedList<Integer> adj[]; //Adjacency Lists

    public ArrayList<Integer> dfsOfGraph(int v, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> softDfs) {

        boolean vis[] = new boolean[v];
        ArrayList<Integer> ans = new ArrayList<>();

        for (int i = 0; i < v; i++) {
            if (!vis[i]) {
                dfsGraph(i, adj, vis, -1);
            }
        }
        return ans;

    }

    public boolean dfsGraph(int v, ArrayList<ArrayList<Integer>> adj, boolean vis[], int parent) {

        vis[v] = true;
        for (Integer neighbour : adj.get(v)) {
            if (!vis[neighbour]) {
                if (dfsGraph(neighbour, adj, vis, v))
                    return true;
            } else if (parent != neighbour) {

                return true;
            }
        }
            return false;
        }
}
