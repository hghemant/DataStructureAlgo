Problem : You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.

The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.

Given two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.

You must write an algorithm with less than O(mn) runtime complexity


Example 

Input: image = [["0","0","1","0"],["0","1","1","0"],["0","1","0","0"]], x = 0, y = 2
Output: 6


public int minArea(char[][] image, int x, int y) {

    int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    
    Queue<int[]> q = new LinkedList<>();
    
    int  m = image.length;
    int  n = image[0].length;
    
    int top = x;
    int bottom = x;
    int left = y;
    int right = y;
    
    boolean[][] visited = new boolean[m][n];
    
    q.offer(new int[]{x, y});
    visited[x][y] = true;
          
    while(!q.isEmpty()){   
            int[] cell = q.poll();
            
            for(int[] d : dirs){
                
                int nR = cell[0] + d[0];
                int nC = cell[1] + d[1];
                
                if(nR >= m || nC >= n || nR < 0 || nC < 0 || visited[nR][nC] || image[nR][nC] == '0'){
                    continue;
                }
                
                q.add(new int[]{nR, nC});
                visited[nR][nC] = true;
                top = Math.min(top, nR);
                bottom = Math.max(bottom, nR);
                left = Math.min(left, nC);
                right = Math.max(right, nC);
            }
    }
        
    return Math.abs((bottom - top+1) * (right - left +1));
}


Using DFS


public int minArea(char[][] image, int x, int y) {
    if(image == null || image.length == 0) return 0;
    int[] rect = new int[] {x, x,y,y};
    dfs(image, new boolean[image.length][image[0].length], x,y,rect);
    System.out.println(Arrays.toString(rect));
    return (rect[1]-rect[0]+1)*(rect[3]-rect[2]+1);
}

public void dfs(char[][] image, boolean[][] visited, int x, int y, int[] rect){
    visited[x][y] = true;
    rect[0] = Math.min(rect[0], x);
    rect[1] = Math.max(rect[1], x);
    rect[2] = Math.min(rect[2], y);
    rect[3] = Math.max(rect[3], y);
    int[] rows = {-1,0,0,1};
    int[] cols = {0,-1,1,0};
    for(int k=0; k < 4; k++){
        int i = x+ rows[k];
        int j = y+ cols[k];
        if(i >=0 && i < image.length && j >= 0 && j < image[0].length && !visited[i][j] && image[i][j] == '1'){
            dfs(image, visited, i, j, rect);
        }
    }
}
