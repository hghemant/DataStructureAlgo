You are given a string s representing a list of words. Each letter in the word has one or more options.

If there is one option, the letter is represented as is.
If there is more than one option, then curly braces delimit the options. For example, "{a,b,c}" represents options ["a", "b", "c"].
For example, if s = "a{b,c}", the first character is always 'a', but the second character can be 'b' or 'c'. The original list is ["ab", "ac"].

Return all words that can be formed in this manner, sorted in lexicographical order.


Example : 

Input: s = "{a,b}c{d,e}f"
Output: ["acdf","acef","bcdf","bcef"]


List<List<Character>> parts;
    List<String> results;
    
    /**
        The idea is to convert the string into a DS like [[a,b],[c],[d,e],[f]].
        This way the DFS/recursion on a list of lists is easier to understand
    */
    public String[] expand(String S) {
        parts = new ArrayList<>();
        boolean start = false;
        List<Character> part = new ArrayList<>();
        // O(Slog(S))
        for (int i=0; i < S.length(); i++) {
            char ch = S.charAt(i);
            
            if (ch == ',') continue;
            
            if (ch == '{') {
                start = true;
                part = new ArrayList<>();
                continue;
            }
            
            if (ch == '}') {
                start = false;
                Collections.sort(part);
                parts.add(part);
                
                continue;
            }

            if (start) {
                part.add(ch);
            } else {
                parts.add(Arrays.asList(ch));
            }
        }
        
        results = new ArrayList<>();
        // O(S)
        getStrings(0, "");
        
        String [] arr = new String[results.size()];
        int index=0;
        for (String result: results) arr[index++] = result;
        
        return arr;
    }
    
    /**
      Just grab characters from each part and append to the result string.  
    */
    private void getStrings(int index, String result) {
        // If we reach the end then call it a result and return.
        if (index == parts.size()) {
            results.add(result);
            
            return;
        }
        
        List<Character> part = parts.get(index);
        for (char ch: part) {
            getStrings(index+1, result+ch);
        }
    }
