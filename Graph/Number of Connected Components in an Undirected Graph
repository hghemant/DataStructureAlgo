          public int countComponents(int n, int[][] edges) {
    int[] parent = new int[n];
    for(int i = 0 ; i < n ; i++)
        parent[i] = i;
    
    for(int[] edge : edges)
        union(edge[0], edge[1], parent);
    
    Set<Integer> set = new HashSet<>();
    
    for(int i : parent)
        set.add(find(i, parent));
    return set.size();
}

private void union(int x, int y, int[] parent){
    int rootX = find(x, parent);
    int rootY = find(y, parent);
    
    if(rootX != rootY)
        parent[rootY] = rootX;
}

private int find(int x, int[] parent){
    if(parent[x] == x)
        return x;
    return parent[x] = find(parent[x], parent);
}

Another Approch


public int countComponents(int n, int[][] edges) {
        //build the adjacency list/map
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0; i<n; i++) {
          map.put(i, new ArrayList<>());
        }
        for(int[] edge: edges) {
          int edge0 = edge[0];
          int edge1 = edge[1];
          
          map.get(edge0).add(edge1);
          map.get(edge1).add(edge0);
        }

      int count = 0;
      boolean[] visited = new boolean[n];
      //do dfs against every non-visited key
      for(Integer edge: map.keySet()) {
        if(visited[edge] == false) {
          dfs(map, edge, count, visited);
          count++;
        }
      }
       return count;
    }
  
    private void dfs(Map<Integer, List<Integer>> map, Integer edge, int count, boolean[] visited) {
      
      if(visited[edge] == true) {
        return;
      }
    
      visited[edge] = true;  
      for(Integer vertex: map.get(edge)) {
        dfs(map, vertex, count, visited);
      }    
      
    }
