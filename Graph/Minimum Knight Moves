public int minKnightMoves(int x, int y) {
    // Convert x,y to positive because since we are going from (0,0)
    // We take same number of minimum moves to go to (-1,-2) or (1,2) or (-1,2) or (1,-2)
    // from (0,0). So We are only going to compute it in the 1st quadrant. 
vclass Solution {
    public static final int[][] moves ={{2,1},{1,2},{-2,1},{-1,2},{2,-1},{1,-2},{-2,-1},{-1,-2}};

    // public boolean isVaiildPosition(int x, int y){
    //    return Math.abs(x)< Integer.MAX_VALUE && Math.abs(y)<Integer.MAX_VALUE;

    // }
    public int minKnightMoves(int x, int y) {
     Set<String> visCoordinate= new HashSet<>();  
     x= Math.abs(x);
     y=Math.abs(y); 
     Queue<int[]> que= new LinkedList<>();
     que.add(new int[]{0,0});
     visCoordinate.add("0,0");
     int distance =0;
    while(!que.isEmpty()){
        int size= que.size();
        for(int i =0;i <size; i++){
            int[] minKnightMoves=que.poll();
            if(minKnightMoves[0]==x && minKnightMoves[1]==y){
                return distance;
            }
            for(int[] move:moves){
             int[] newPos= {minKnightMoves[0]+move[0],minKnightMoves[1]+move[1]};
             String key= newPos[0]+","+newPos[1];
             if(!visCoordinate.contains(key) && isVaiildPosition(newPos[0],newPos[1])){
                 que.add(newPos);
                 visCoordinate.add(key);
             }
            }
          
        }
        distance++;
    }
    return -1;
        
    }
public boolean isVaiildPosition(int x, int y){
    if(x<-1 || y<-1){
        return false;
    } 
    return true;
}
    
   
