You are given an m x n grid rooms initialized with these three possible values.

-1 A wall or an obstacle.
0 A gate.
INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.


Example 

Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]


public void wallsAndGates(int[][] rooms) {
        int m=rooms.length,n=rooms[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][] dir = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        Queue<int[]> q = new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(rooms[i][j] == 0){
                    q.add(new int[]{i,j});
                    visited[i][j]=true;
                }
            }
        }
        //BFS
        int level=1;
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                int[] info = q.poll();
                int curX=info[0];
                int curY=info[1];
                for(int[] xy : dir){
                    int newX=curX+xy[0];
                    int newY=curY+xy[1];
                    if(newX >= m || newY >= n || newX < 0 || newY < 0
                       || visited[newX][newY] || rooms[newX][newY] == -1)
                        continue;
                    rooms[newX][newY]=level;
                    q.add(new int[]{newX,newY});
                    visited[newX][newY]=true;
                }
            }
            level++;
        }
    }
