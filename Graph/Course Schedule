Question : There are a total of numCourses courses you have to take labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example : 
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible

class Solution {
     
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> g = new ArrayList<>();
        int n = numCourses;
        boolean vis[] = new boolean[n];
        boolean res[] = new boolean[n];
        ArrayList<Integer>arr= new ArrayList<>();

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; ++i)
            map.put(i, new ArrayList<Integer>());
        for (int[] p : prerequisites) {
            map.get(p[1]).add(p[0]);
        }

        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                if(dfsGraph1(i, map, vis, res)){
                    return false;
                }
            }
        }
return true;
    }

    public boolean dfsGraph1(int v, Map<Integer, List<Integer>> map, boolean vis[], boolean res[]) {

        vis[v] = true;
        res[v] = true;
        for (Integer neighbour :  map.get(v)) {
            if (!vis[neighbour]) {
                if (dfsGraph1(neighbour, map, vis, res))
                    return true;
            } else if (res[neighbour]) {

                return true;
            }
        }
        res[v]=false;
        return false;
    }
}
