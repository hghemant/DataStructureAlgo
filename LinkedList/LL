package LinkList;

import java.util.HashMap;

public class LL {
    Node head;

    class Node {
        String data;
        Node next;

        Node(String data) {
            this.data = data;
            this.next = null;
        }
    }
//Add -first , last

    public void addFirst(String data) {

        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        newNode.next = head;
        head = newNode;
    }


    public void addLast(String data) {
        if (head == null) {
            System.out.print("Link list is empty");
        }
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }


    public void printList() {
        Node currNode = head;
        while (currNode != null) {
            System.out.print(currNode.data + " ->");
            currNode = currNode.next;
        }
        System.out.print("NULL");
    }

    public void deleteFirst() {
        if (head == null) {
            System.out.println("the list is empty");
        }

        head = head.next;
    }

    public void deleteLast() {
        if (head == null) {
            System.out.println("the list is empty");
        }

        if(head.next==null){
            head=null;
            return;
        }
        Node secondNode = head;
        Node lastNode = head.next;
        while (lastNode.next != null) {
            lastNode= lastNode.next;
            secondNode=secondNode.next;
        }
        secondNode.next=null;
    }

    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        HashMap<Node,Integer> map=new HashMap<>();
        Node ans=null;
        Node prev=null;
        Node temp=head;
        while(temp!=null)
        {
            if (!map.containsKey(temp)){map.put(temp,temp.data);}
            else{ans=prev;break;}
            prev=temp;
            temp=temp.next;
        }
        if (ans!=null){ans.next=null;}
    }


    public  static  void  main(String args[]){


    }
}
