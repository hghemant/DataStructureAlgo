package LinkedList;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class rotateLinkedList {

    Node head;

    class Node {
        String data;
        Node next;

        Node(String data) {
            this.data = data;
            this.next = null;
        }
    }

    public void addFirst(String data) {

        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        newNode.next = head;
        head = newNode;
    }


    public void addLast(String data) {
        if (head == null) {
            System.out.print("Link list is empty");
        }
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }


    public void printList() {
        Node currNode = head;
        while (currNode != null) {
            System.out.print(currNode.data + " ->");
            currNode = currNode.next;
        }
        System.out.print("NULL");
    }

    public void deleteFirst() {
        if (head == null) {
            System.out.println("the list is empty");
        }

        head = head.next;
    }

    public void deleteLast() {
        if (head == null) {
            System.out.println("the list is empty");
        }

        if (head.next == null) {
            head = null;
            return;
        }
        Node secondNode = head;
        Node lastNode = head.next;
        while (lastNode.next != null) {
            lastNode = lastNode.next;
            secondNode = secondNode.next;
        }
        secondNode.next = null;
    }


    public Node reverse(Node head) {
        Node prev = null;
        Node Curr = head;
        while (Curr != null) {
            Node next = Curr.next;
            Curr.next = prev;
            prev = Curr;
            Curr = next;
        }
        return prev;
    }

    public Node findMiddle(Node head) {
        Node fast = head;
        Node slow = head;
        if (fast.next != null || fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;

        }
        return slow;
    }

    public boolean isPalndrom(Node head) {

        if (head == null || head.next == null) return true;

        Node middleElement = findMiddle(head);
        Node secondHalfToStart = reverse(middleElement.next);
        Node firstHalfToStart = head;

        while (secondHalfToStart != null) {
            if (firstHalfToStart.data != secondHalfToStart.data) return false;
            firstHalfToStart = firstHalfToStart.next;
            secondHalfToStart = secondHalfToStart.next;

        }
        return true;
    }

    public Node removeNthFromEnd(Node head, int n) {

        if (head.next == null) {
            return null;
        }
        int size = 0;
        Node currNode = head;
        while (currNode != null) {
            currNode = currNode.next;
            size++;
        }

        if (size == n) {
            return head.next;
        }
        int indexToSearch = size - n;
        Node prev = head;
        int i = 0;
        while (i < indexToSearch) {
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
        return head;

    }

    public Node swapNodes(Node head,int num, int k) {

        Node temp = head;

        int l = num - k + 1;
        if(l == k)
            return head;

        int k_val = 0 , l_val = 0;
        temp = head;
        for(int i = 1 ; i <= num ; i++){
            if(i == k)
                k_val = temp.data;
            if(i == l)
                l_val = temp.data;
            temp = temp.next;
        }

        temp = head;
        for(int i = 1 ; i <= num ; i++){
            if(i == k)
                temp.data = l_val;
            if(i == l)
                temp.data = k_val;
            temp = temp.next;
        }
        return head;

    }

    public Node rotate(Node head, int k) {
      Node firstNode=head;
        while (firstNode.next != null) {
            firstNode = firstNode.next;
        }
      for(int i=0; i<k;i++){
          Node temp=head;
           head=head.next;
           temp.next=null;
           firstNode.next=temp;
           firstNode = temp;
         }
       return head;
    }

    public boolean findLoop(Node head) {

        if (head == null) {
            System.out.println("the list is empty");
        }

        if (head.next == null) {
            head = null;
            return false;
        }
        Node secondNode = head;
        Node lastNode = head;
        while (lastNode.next != null || lastNode.next.next != null) {
            lastNode = lastNode.next.next;
            secondNode = secondNode.next;
            if (lastNode == secondNode) {
                return true;
            }

        }
        return false;
    }

    public static void removeLoop(Node head) {
        if (head.next == null) {
            return;
        }
        Set<Node> set=new HashSet<>();
        Node prev = null;
        Node curr = head;
        while (curr!= null ) {
           if(set.contains(curr)){
               prev.next=null;
               return;
           }
        set.add(curr);
        curr=curr.next;
        }
    }

    Node compute(Node head)
    {
        // your code here
        Node curr =head;
        Node temp = curr;

        while(curr.next != null){

            if(curr.data < curr.next.data){

                temp = curr;
                temp.data = temp.next.data;
                temp.next = temp.next.next;

                curr = head;
            }else{
                curr = curr.next;
            }
        }
        return head;
    }



    public static void main(String args[]) {
        rotateLinkedList rotateLinkedLists = new rotateLinkedList();
        rotateLinkedLists.addFirst("a");
        rotateLinkedLists.addFirst("is");
        rotateLinkedLists.addLast("one");
    }
}


