public List<List<Integer>> verticalOrder(TreeNode root) {
    List<List<Integer>> res = new ArrayList<>();
    if (root == null) {
        return res;
    }
    
    Map<Integer, ArrayList<Integer>> map = new HashMap<>();
    Queue<TreeNode> q = new LinkedList<>();
    Queue<Integer> cols = new LinkedList<>();

    q.add(root); 
    cols.add(0);

    int min = 0;
    int max = 0;
    
    while (!q.isEmpty()) {
        TreeNode node = q.poll();
        int col = cols.poll();
        
        if (!map.containsKey(col)) {
            map.put(col, new ArrayList<Integer>());
        }
        map.get(col).add(node.val);

        if (node.left != null) {
            q.add(node.left); 
            cols.add(col - 1);
            min = Math.min(min, col - 1);
        }
        
        if (node.right != null) {
            q.add(node.right);
            cols.add(col + 1);
            max = Math.max(max, col + 1);
        }
    }

    for (int i = min; i <= max; i++) {
        res.add(map.get(i));
    }

    return res;
}





class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        Map<Integer, List<int[]>> map = new TreeMap<>();
        dfs(root,0,0,map);
        
        List<List<Integer>> res = new ArrayList<>();
        
        for(List<int[]> e : map.values()){
            Collections.sort(e ,(x1,x2) -> x1[0]-x2[0]);
            List<Integer> t= new ArrayList<>();
            
            for(int[] val :e){
                t.add(val[1]);
            }
            res.add(t);
        }
        return res;
    }   
    
    private void dfs(TreeNode root, int depth,int index,Map<Integer, List<int[]>> map){
        if(root == null){
            return;
        }
        if(!map.containsKey(index)){
            map.put(index, new ArrayList<>());
        }
        
        map.get(index).add(new int[]{depth,root.val});
        dfs(root.left,depth+1,index-1,map);
        dfs(root.right,depth+1,index+1,map);
    }
}
