Given the root of a binary tree where every node has a unique value and a target integer k, return the value of the nearest leaf node to the target k in the tree.

Nearest to a leaf means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

Example Input: root = [1,3,2], k = 1
Output: 2
Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.

 class Solution {
    private int min = 0;
    private int res = 0;

    public int findClosestLeaf(TreeNode root, int k) {
        Map<TreeNode, Integer> map = new HashMap();
        min = Integer.MAX_VALUE;
        find(root, k, map);
        dfs(root, map, 0);
        return res;
    }

    private void find(TreeNode root, int k, Map<TreeNode, Integer> map) {
        if (root == null)
            return;
        if (root.val == k) {
            map.put(root, 0);
            return;
        }
        find(root.left, k, map);
        if (map.containsKey(root.left)) {
            map.put(root, map.get(root.left) + 1);
            return;
        }
        find(root.right, k, map);
        if (map.containsKey(root.right)) {
            map.put(root, map.get(root.right) + 1);
        }
    }

    private void dfs(TreeNode root, Map<TreeNode, Integer> map, int path) {
        if (root == null)
            return;
        path = map.getOrDefault(root, path);
        if (root.left == null && root.right == null) {
            if (path < min) {
                min = path;
                res = root.val;
            }
        }
        dfs(root.left, map, path + 1);
        dfs(root.right, map, path + 1);
    }
}
