Given the root of a binary tree, collect a tree's nodes as if you were doing this:

Collect all the leaf nodes.
Remove all the leaf nodes.
Repeat until the tree is empty.
 
 Example : 
 Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]

 List<List<Integer>> answer;
    
    public List<List<Integer>> findLeaves(TreeNode root) {
        this.answer = new ArrayList<>();
        if(root == null) return answer;
        findLeavesHelper(root);
        return answer;        
    }
    
    public int findLeavesHelper(TreeNode node) {
        // Found leaf
        if(node.left == null && node.right == null) {
            if(answer.size() == 0) answer.add(new ArrayList<>());
            answer.get(0).add(node.val);
            return 0;
        } 
        int left = node.left == null ? 0 : findLeavesHelper(node.left);
        int right = node.right == null ? 0 : findLeavesHelper(node.right);
        int height = 1 + Math.max(left, right);
        if(answer.size() == height) answer.add(new ArrayList<>());
        answer.get(height).add(node.val);
        return height;
    }   

