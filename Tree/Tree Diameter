Q
The diameter of a tree is the number of edges in the longest path in that tree.
There is an undirected tree of n nodes labeled from 0 to n - 1. You are given a 2D array edges where edges.length == n - 1 and edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree.
Return the diameter of the tree.

Ex:
Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: The longest path of the tree is the path 1 - 0 - 2.


class Solution {
     int ans = 0;
    public int treeDiameter(int[][] edges) {
        int n = edges.length;
        ArrayList<Integer>[] adj = new ArrayList[n+1];
        for(int i=0;i<=n;++i) {
            adj[i] = new ArrayList();
        }
        boolean[] visited = new boolean[n+1];
        for(int[] edge : edges){
            adj[edge[0]].add(edge[1]);
            adj[edge[1]].add(edge[0]);
        }
        
        dfs(edges[0][0], adj, visited);
        return ans;
    }
    
    private int dfs(int node, List<Integer>[] adj, boolean[] visited) {
        visited[node] = true;
        int max1 = 0, max2 = 0;
        for(Integer child : adj[node]) {
            if(!visited[child]) {
                int height = dfs(child, adj, visited);
                if(max1 < height && height <= max2) {
                    max1 = height;
                } else if( height > max2) {
                    max1 = max2;
                    max2 = height;
                }
                ans = Math.max(ans, max1 + max2);
            }
        }
        return 1+max2;
    }
}
