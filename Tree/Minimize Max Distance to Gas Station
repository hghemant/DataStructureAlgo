You are given an integer array stations that represents the positions of the gas stations on the x-axis. You are also given an integer k.

You should add k new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.

Let penalty() be the maximum distance between adjacent gas stations after adding the k new stations.

Return the smallest possible value of penalty(). Answers within 10-6 of the actual answer will be accepted.


First Solution 

class Solution {
    public double minmaxGasDist(int[] stations, int K) {
        int N = stations.length;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) ->
            (double)b[0]/b[1] < (double)a[0]/a[1] ? -1 : 1);
        for (int i = 0; i < N-1; ++i)
            pq.add(new int[]{stations[i+1] - stations[i], 1});

        for (int k = 0; k < K; ++k) {
            int[] node = pq.poll();
            node[1]++;
            pq.add(node);
        }

        int[] node = pq.poll();
        return (double)node[0] / node[1];
    }
}


second Solution 

class Solution {
  public double minmaxGasDist(int[] stations, int k) {
    return withBinarySearch(stations, k);
  }
  
  public double withBinarySearch(int[] stations, int k) {
    double minD = 0;
    double maxD = 1e8;
    while(maxD - minD > 1e-6) {
      double mid = minD + ((maxD - minD) / 2);
      
      if(isPossible(stations, k, mid)) {
        // we can potentially reduce max dist. b/w gas stations more
        maxD = mid;
      } else {
        // we can't
        minD = mid;
      }
    }
    
    return minD;
  }
  
  public boolean isPossible(int[] stations, int k, double d) {
    int totalStations = 0;
    for(int i = 1; i < stations.length; i++) {
      totalStations += (int) ((stations[i] - stations[i-1]) / d);
    }
    
    return totalStations <= k;
  }
}

Time Complexity: O(N \log W)O(NlogW), where NN is the length of stations, and W = 10^{14}W=10 
14  is the range of possible answers (10^810 8 ), divided by the acceptable level of precision (10^{-6}10 âˆ’6 ).

Space Complexity: O(1)O(1) in additional space complexity.
