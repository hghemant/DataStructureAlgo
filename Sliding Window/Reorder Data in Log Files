Qus 
You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.


Let NN be the number of logs in the list and MM be the maximum length of a single log.

Time Complexity: O(M⋅N⋅logN)


class Solution {
    public String[] reorderLogFiles(String[] logs) {
        
        Arrays.sort(logs, (a,b)->{
            int identA = a.indexOf(" ") + 1;
            int identB = b.indexOf(" ") + 1;

            boolean isLetterA = Character.isLetter(a.charAt(identA));
            boolean isLetterB = Character.isLetter(b.charAt(identB));
            if(isLetterA && isLetterB){
                int cmp = a.substring(identA).compareTo(b.substring(identB));
                if(cmp != 0) return cmp;
                
                return a.compareTo(b);
            }else if(isLetterA && !isLetterB){
                return -1;
            }else if(!isLetterA && isLetterB){
                return 1;
            }else return 0;
            
        });
        
        return logs;
    }
}
